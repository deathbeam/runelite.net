{"version":3,"sources":["components/footer.js","components/layout.js","components/runescape-map.js","routes/tile-show.js"],"names":["Footer","id","class","href","getBaseUrl","Layout","children","fullWidth","props","style","maxWidth","DEFAULT_VIEW","fromLatLng","map","latLng","point","project","x","RS_CENTER_X","y","RS_TILE_HEIGHT_PX","Math","round","toLatLng","RS_TILE_WIDTH_PX","unproject","lat","lng","mapTile","tile","num","regionId","regionX","regionY","jsColor","intColor","join","argb","slice","z","label","color","prepareMap","defaultView","setView","mouseRect","rectangle","fillColor","fillOpacity","weight","interactive","addTo","on","e","mousePos","latlng","setBounds","locationControl","Control","position","onAdd","container","DomUtil","create","button","updateButton","region","center","getCenter","rsCenter","rsRegion","regions","includes","name","findCurrentRegion","hidden","innerHTML","resetButton","DomEvent","disableClickPropagation","addListener","viewport","fitBounds","TileMapHandler","tiles","plane","useMap","layer","tileLayer","noWrap","tms","removeFrom","length","tilesX","t","tilesY","minX","min","maxX","max","minY","maxY","setMaxBounds","bounds","url","pathOptions","RuneScapeMap","minZoom","maxZoom","zoom","attributionControl","whenCreated","connect","state","b64","decodedData","jsonData","b64string","window","location","hash","substring","atob","JSON","parse","ignored","data","title","hero","description"],"mappings":"uJAqBeA,EAlBA,kBACb,uBAASC,GAAG,UACV,mBAAKC,MAAM,mBACT,0BACE,uBADF,kBAEiB,iBAAGA,MAAM,iBAF1B,OAEgD,IAC9C,iBAAGA,MAAM,kBAHX,SAGoC,IAClC,iBAAGC,KAAK,6BAAR,aAJF,IAIqD,IACnD,iBAAGA,KAAK,wBAAR,SALF,OAK+C,IAC7C,iBAAGA,KAAK,4BAAR,gBACA,iBAAGA,KAAI,UAAKC,cAAL,aAA8BF,MAAM,eACzC,iBAAGA,MAAM,eADX,0BCKOG,IAfA,SAAC,GAAuC,IAArCC,EAAoC,EAApCA,SAAUC,EAA0B,EAA1BA,UAAcC,EAAY,wCAOpD,OANAA,EAAK,MAASA,EAAK,MAAS,aAAeA,EAAK,MAAS,YACzDA,EAAMC,MAAN,2BACMD,EAAMC,OAAS,IADrB,IAEEC,SAAUH,EAAY,OAAS,KAI/B,mCAASC,EAAT,CAAgBP,GAAG,WAChBK,EACD,YAAC,EAAD,S,iJCkBAK,G,OAAe,CAAC,KAAM,OAEtBC,EAAa,SAACC,EAAKC,GACvB,IAAMC,EAAQF,EAAIG,QAAQF,EANX,IAOfC,EAAME,GAAKC,GACX,IAAIC,EAfgB,OAeIJ,EAAMI,EAAIC,EAIlC,OAHAD,EAAIE,KAAKC,OAAOH,EAdQ,QAEN,KAeX,CAAEF,EADPI,KAAKC,OAAOP,EAAME,EAjBG,QAEL,KAgBNE,MAGRI,EAAW,SAACV,EAAKI,EAAGE,GACxBF,EAtBuB,IAsBlBA,EApBa,MAoByBO,EAC3CL,EAxBoB,OAEI,IAsBHA,EApBH,MAqBlBF,GAhBkB,EAiBlB,IAAMH,EAASD,EAAIY,UAAUV,gBAAME,EAAGE,GAnBvB,IAoBf,MAAO,CAACL,EAAOY,IAAKZ,EAAOa,MA0BvBC,EAAU,SAAAC,GACd,IAVcC,EAURC,EAAWF,EAAI,SACfG,EAAUH,EAAI,QACdI,EAAUJ,EAAI,QAChBK,EAAU,UAEd,GAAIL,EAAI,MAAW,CACjB,IAAMM,EAAWN,EAAI,MAAJ,MAEjB,GAAIM,EAlBQL,EAmBQK,EAAlBD,EAbG,QAAU,EAFJ,UAHbJ,KAAS,MAGkB,IADd,MAANA,KAAkB,EADT,IAANA,IAGI,WAANA,KAAsB,IAAM,KACNM,KAAK,KAAO,SAcjC,GAAIP,EAAI,MAAW,CACxB,IAAMQ,EAAOR,EAAI,MACjBK,EAAU,IAAMG,EAAKC,MAAM,EAAG,GAAKD,EAAK,GAAKA,EAAK,IAQtD,MAAO,CACLpB,GALUc,IAAa,GAAM,GAAKC,EAMlCb,IALqB,IAAXY,IAAoB,GAAKE,EAMnCM,EALQV,EAAI,EAMZW,MAAOX,EAAI,MACXY,MAAOP,IAILQ,EAAa,SAAA7B,GACjB,IAAM8B,EAAcpB,EAASV,EAAKF,EAAa,GAAIA,EAAa,IAChEE,EAAI+B,QAAQD,GAEZ,IAAME,EAAYC,oBAChB,CACE,CAAC,EAAG,GACJ,CAAC,EAAG,IAEN,CACEL,MAAO,UACPM,UAAW,UACXC,YAAa,GACbC,OAAQ,EACRC,aAAa,IAIjBL,EAAUM,MAAMtC,GAEhBA,EAAIuC,GAAG,aAAa,SAAAC,GAClB,IAAMC,EAAW1C,EAAWC,EAAKwC,EAAEE,QACnCV,EAAUW,UAAU,CAClBjC,EAASV,EAAKyC,EAASrC,EAAGqC,EAASnC,GACnCI,EAASV,EAAKyC,EAASrC,EAAI,EAAGqC,EAASnC,EAAI,QAI/C,IAAMsC,EAAkB,IAAIC,UAAQ,CAAEC,SAAU,aAChDF,EAAgBG,MAAQ,SAAA/C,GACtB,IAAMgD,EAAYC,UAAQC,OAAO,MAAO,+BAElCC,EAASF,UAAQC,OAAO,OAAQ,yBAA0BF,GAC1DI,EAAe,WACnB,IAAMC,EAvFc,SAAArD,GACxB,IAD+B,EACzBsD,EAAStD,EAAIuD,YACbC,EAAWzD,EAAWC,EAAKsD,GAC3BG,EAAaD,EAASpD,GAAK,GAAM,EAAMoD,EAASlD,GAAK,EAH5B,cAKVoD,KALU,IAK/B,2BAA8B,CAAC,IAApBL,EAAmB,QAC5B,GAAIA,EAAOK,QAAQC,SAASF,GAC1B,OAAOJ,EAAOO,MAPa,8BAW/B,MAAO,GA4EYC,CAAkB7D,GACjCmD,EAAOW,QAAUT,EACjBF,EAAOY,UAAYV,GAKrB,OAFAD,IACApD,EAAIuC,GAAG,OAAQa,GACRJ,GAGTJ,EAAgBN,MAAMtC,GAEtB,IAAMgE,EAAc,IAAInB,UAAQ,CAAEC,SAAU,YAC5CkB,EAAYjB,MAAQ,SAAA/C,GAClB,IAAMgD,EAAYC,UAAQC,OAAO,MAAO,+BAClCC,EAASF,UAAQC,OAAO,IAAK,cAAeF,GAYlD,OAVAiB,WAASC,wBAAwBf,GAAQgB,YACvChB,EACA,SACA,kBACEnD,EAAIoE,SACApE,EAAIqE,UAAUrE,EAAIoE,UAClBpE,EAAI+B,QAAQD,EApIH,KAqIfqB,GAGKH,GAGTgB,EAAY1B,MAAMtC,IAGdsE,EAAiB,SAAC,GAAsB,IAApBC,EAAmB,EAAnBA,MAAOC,EAAY,EAAZA,MACzBxE,EAAMyE,cAENC,EAAQC,oBACZ,wFACA,CACEC,QAAQ,EACRC,KAAK,EACLL,MAAOA,IAWX,GAPIxE,EAAI2E,WACN3E,EAAI2E,UAAUG,WAAW9E,GAG3BA,EAAI2E,UAAYD,EAChB1E,EAAI2E,UAAUrC,MAAMtC,GAEhBuE,EAAMQ,OAAS,EAAG,CACpB,IAAMC,EAAST,EAAMvE,KAAI,SAAAiF,GAAC,OAAIA,EAAE7E,KAC1B8E,EAASX,EAAMvE,KAAI,SAAAiF,GAAC,OAAIA,EAAE3E,KAC1B6E,EAAO3E,KAAK4E,IAAL,MAAA5E,KAAI,YAAQwE,IAvKJ,EAwKfK,EAAO7E,KAAK8E,IAAL,MAAA9E,KAAI,YAAQwE,IAxKJ,EAyKfO,EAAO/E,KAAK4E,IAAL,MAAA5E,KAAI,YAAQ0E,IAzKJ,EA0KfM,EAAOhF,KAAK8E,IAAL,MAAA9E,KAAI,YAAQ0E,IA1KJ,EA6Kfd,EAAW,CAFC1D,EAASV,EAAKmF,EAAMI,GACpB7E,EAASV,EAAKqF,EAAMG,IAGtCxF,EAAIoE,SAAWA,EACfpE,EAAIqE,UAAUD,GACdpE,EAAIyF,aAAarB,GAGnB,OAAOG,EAAMvE,KAAI,SAAAgB,GACf,IAEM0E,EAAS,CAFHhF,EAASV,EAAKgB,EAAKZ,EAAGY,EAAKV,GAC1BI,EAASV,EAAKgB,EAAKZ,EAAI,EAAGY,EAAKV,EAAI,IAEhD,OACE,YAAC,IAAD,KACGU,EAAKW,OACJ,YAAC,IAAD,CAAc+D,OAAQA,EAAQC,IAAK,uBAErC,YAAC,IAAD,CACED,OAAQA,EACRE,YAAa,CACXhE,MAAOZ,EAAKY,MACZM,UAAWlB,EAAKY,MAChBO,YAAa,GACbC,OAAQ,EACRC,aAAa,IAGdrB,EAAKW,OAAS,YAAC,IAAD,KAAUX,EAAKW,aA+BzBkE,IAxBM,SAAC,GAAe,IAAbtB,EAAY,EAAZA,MACjBA,IACHA,EAAQ,IAKV,IAAMC,GAFND,EAAQA,EAAMvE,IAAIe,IAEEgE,OAAS,EAAIR,EAAM,GAAG7C,EAAI,EAE9C,OACE,YAAC,IAAD,KACE,YAAC,IAAD,CACEoE,QAzNS,EA0NTC,QAzNS,GA0NTC,KAzNa,EA0NbC,oBAAoB,EACpBC,YAAarE,GAEb,YAACyC,EAAD,CAAgBC,MAAOA,EAAOC,MAAOA,Q,uDC1P7C,6EAsCe2B,uBAhBS,SAACC,EAAD,GAAqB,IAAXC,EAAU,EAAVA,IAC5BC,EAAc,GACdC,EAAW,GAEf,IACE,IAAMC,EAAYH,GAAOI,OAAOC,SAASC,KAAKC,UAAU,GACxDN,EAAcO,KAAKL,GACnBD,EAAWO,KAAKC,MAAMT,GACtB,MAAOU,IAET,MAAO,CACLC,KAAMX,EACN/B,MAAOgC,KAIIJ,EA9BE,SAAC,GAAqB,IAAnBc,EAAkB,EAAlBA,KAAM1C,EAAY,EAAZA,MACxB,OACE,YAAC,IAAD,KACE,YAAC,IAAD,CAAM2C,MAAK,yBAAoBC,IAAKD,OAASE,YAAaH,IAC1D,uBAAS7H,GAAG,SACV,mBAAKC,MAAM,iCACT,YAAC,IAAD,CAAckF,MAAOA,IACrB,mBAAKlF,MAAM,cAAc4H","file":"static/js/1.6c72180f.chunk.js","sourcesContent":["import { h } from 'preact'\nimport { getBaseUrl } from '../util'\n\nconst Footer = () => (\n  <section id=\"footer\">\n    <div class=\"content-section\">\n      <footer>\n        <hr />\n        Developed with <i class=\"fas fa-heart\" /> and{' '}\n        <i class=\"fas fa-coffee\" /> using{' '}\n        <a href=\"https://getbootstrap.com/\">Bootstrap</a>,{' '}\n        <a href=\"https://reactjs.org/\">React</a> and{' '}\n        <a href=\"https://fontawesome.com/\">Font Awesome</a>\n        <a href={`${getBaseUrl()}/atom.xml`} class=\"float-right\">\n          <i class=\"fas fa-rss\" /> Subscribe via RSS\n        </a>\n      </footer>\n    </div>\n  </section>\n)\n\nexport default Footer\n","import { h } from 'preact'\nimport Footer from './footer'\n\nconst Layout = ({ children, fullWidth, ...props }) => {\n  props.class = props.class ? 'container ' + props.class : 'container'\n  props.style = {\n    ...(props.style || {}),\n    maxWidth: fullWidth ? '100%' : ''\n  }\n\n  return (\n    <div {...props} id=\"layout\">\n      {children}\n      <Footer />\n    </div>\n  )\n}\n\nexport default Layout\n","import { h, Fragment } from 'preact'\nimport {\n  point,\n  rectangle,\n  Control,\n  DomUtil,\n  DomEvent,\n  tileLayer\n} from 'leaflet'\nimport {\n  MapContainer,\n  Rectangle,\n  Tooltip,\n  ImageOverlay,\n  useMap\n} from 'react-leaflet'\nimport regions from '../_data/regions'\nimport './runescape-map.scss'\n\n// lat/lng calculations source\n// https://github.com/Explv/Explv.github.io/blob/master/js/model/Position.js\nconst MAP_HEIGHT_PX = 296704\nconst RS_TILE_WIDTH_PX = 32\nconst RS_TILE_HEIGHT_PX = 32\nconst RS_OFFSET_X = 1152\nconst RS_OFFSET_Y = 8328\nconst BOUNDS_TOLERANCE = 4\nconst MIN_ZOOM = 6\nconst MAX_ZOOM = 11\nconst DEFAULT_ZOOM = 8\nconst RS_CENTER_X = 8\nconst DEFAULT_VIEW = [3225, 3219]\n\nconst fromLatLng = (map, latLng) => {\n  const point = map.project(latLng, MAX_ZOOM)\n  point.x += RS_CENTER_X * 2\n  let y = MAP_HEIGHT_PX - point.y + RS_TILE_HEIGHT_PX / 4\n  y = Math.round((y - RS_TILE_HEIGHT_PX) / RS_TILE_HEIGHT_PX) + RS_OFFSET_Y\n  const x =\n    Math.round((point.x - RS_TILE_WIDTH_PX) / RS_TILE_WIDTH_PX) + RS_OFFSET_X\n  return { x, y }\n}\n\nconst toLatLng = (map, x, y) => {\n  x = (x - RS_OFFSET_X) * RS_TILE_WIDTH_PX + RS_TILE_WIDTH_PX / 4\n  y = MAP_HEIGHT_PX - (y - RS_OFFSET_Y) * RS_TILE_HEIGHT_PX\n  x -= RS_CENTER_X\n  const latLng = map.unproject(point(x, y), MAX_ZOOM)\n  return [latLng.lat, latLng.lng]\n}\n\nconst findCurrentRegion = map => {\n  const center = map.getCenter()\n  const rsCenter = fromLatLng(map, center)\n  const rsRegion = ((rsCenter.x >> 6) << 8) | (rsCenter.y >> 6)\n\n  for (const region of regions) {\n    if (region.regions.includes(rsRegion)) {\n      return region.name\n    }\n  }\n\n  return ''\n}\n\nconst toColor = num => {\n  num >>>= 0\n  const b = num & 0xff,\n    g = (num & 0xff00) >>> 8,\n    r = (num & 0xff0000) >>> 16,\n    a = ((num & 0xff000000) >>> 24) / 255\n  return 'rgba(' + [r, g, b, a].join(',') + ')'\n}\n\nconst mapTile = tile => {\n  const regionId = tile['regionId']\n  const regionX = tile['regionX']\n  const regionY = tile['regionY']\n  let jsColor = '#ffffff'\n\n  if (tile['color']) {\n    const intColor = tile['color']['value']\n\n    if (intColor) {\n      jsColor = toColor(intColor)\n    } else if (tile['color']) {\n      const argb = tile['color']\n      jsColor = '#' + argb.slice(3, 9) + argb[1] + argb[2]\n    }\n  }\n\n  const x = ((regionId >>> 8) << 6) + regionX\n  const y = ((regionId & 0xff) << 6) + regionY\n  const z = tile['z']\n\n  return {\n    x,\n    y,\n    z,\n    label: tile['label'],\n    color: jsColor\n  }\n}\n\nconst prepareMap = map => {\n  const defaultView = toLatLng(map, DEFAULT_VIEW[0], DEFAULT_VIEW[1])\n  map.setView(defaultView)\n\n  const mouseRect = rectangle(\n    [\n      [0, 0],\n      [0, 0]\n    ],\n    {\n      color: '#1e1e1e',\n      fillColor: '#1e1e1e',\n      fillOpacity: 0.3,\n      weight: 1,\n      interactive: false\n    }\n  )\n\n  mouseRect.addTo(map)\n\n  map.on('mousemove', e => {\n    const mousePos = fromLatLng(map, e.latlng)\n    mouseRect.setBounds([\n      toLatLng(map, mousePos.x, mousePos.y),\n      toLatLng(map, mousePos.x + 1, mousePos.y + 1)\n    ])\n  })\n\n  const locationControl = new Control({ position: 'topright' })\n  locationControl.onAdd = map => {\n    const container = DomUtil.create('div', 'leaflet-bar leaflet-control')\n\n    const button = DomUtil.create('span', 'leaflet-custom-control', container)\n    const updateButton = () => {\n      const region = findCurrentRegion(map)\n      button.hidden = !region\n      button.innerHTML = region\n    }\n\n    updateButton()\n    map.on('move', updateButton)\n    return container\n  }\n\n  locationControl.addTo(map)\n\n  const resetButton = new Control({ position: 'topleft' })\n  resetButton.onAdd = map => {\n    const container = DomUtil.create('div', 'leaflet-bar leaflet-control')\n    const button = DomUtil.create('a', 'fas fa-redo', container)\n\n    DomEvent.disableClickPropagation(button).addListener(\n      button,\n      'click',\n      () =>\n        map.viewport\n          ? map.fitBounds(map.viewport)\n          : map.setView(defaultView, DEFAULT_ZOOM),\n      button\n    )\n\n    return container\n  }\n\n  resetButton.addTo(map)\n}\n\nconst TileMapHandler = ({ tiles, plane }) => {\n  const map = useMap()\n\n  const layer = tileLayer(\n    'https://raw.githubusercontent.com/Explv/osrs_map_tiles/master/{plane}/{z}/{x}/{y}.png',\n    {\n      noWrap: true,\n      tms: true,\n      plane: plane\n    }\n  )\n\n  if (map.tileLayer) {\n    map.tileLayer.removeFrom(map)\n  }\n\n  map.tileLayer = layer\n  map.tileLayer.addTo(map)\n\n  if (tiles.length > 0) {\n    const tilesX = tiles.map(t => t.x)\n    const tilesY = tiles.map(t => t.y)\n    const minX = Math.min(...tilesX) - BOUNDS_TOLERANCE\n    const maxX = Math.max(...tilesX) + BOUNDS_TOLERANCE\n    const minY = Math.min(...tilesY) - BOUNDS_TOLERANCE\n    const maxY = Math.max(...tilesY) + BOUNDS_TOLERANCE\n    const minCorner = toLatLng(map, minX, minY)\n    const maxCorner = toLatLng(map, maxX, maxY)\n    const viewport = [minCorner, maxCorner]\n\n    map.viewport = viewport\n    map.fitBounds(viewport)\n    map.setMaxBounds(viewport)\n  }\n\n  return tiles.map(tile => {\n    const pos = toLatLng(map, tile.x, tile.y)\n    const pos2 = toLatLng(map, tile.x + 1, tile.y + 1)\n    const bounds = [pos, pos2]\n    return (\n      <Fragment>\n        {tile.label && (\n          <ImageOverlay bounds={bounds} url={'/img/tile-text.png'} />\n        )}\n        <Rectangle\n          bounds={bounds}\n          pathOptions={{\n            color: tile.color,\n            fillColor: tile.color,\n            fillOpacity: 0.3,\n            weight: 1,\n            interactive: false\n          }}\n        >\n          {tile.label && <Tooltip>{tile.label}</Tooltip>}\n        </Rectangle>\n      </Fragment>\n    )\n  })\n}\n\nconst RuneScapeMap = ({ tiles }) => {\n  if (!tiles) {\n    tiles = []\n  }\n\n  tiles = tiles.map(mapTile)\n\n  const plane = tiles.length > 0 ? tiles[0].z : 0\n\n  return (\n    <Fragment>\n      <MapContainer\n        minZoom={MIN_ZOOM}\n        maxZoom={MAX_ZOOM}\n        zoom={DEFAULT_ZOOM}\n        attributionControl={false}\n        whenCreated={prepareMap}\n      >\n        <TileMapHandler tiles={tiles} plane={plane} />\n      </MapContainer>\n    </Fragment>\n  )\n}\n\nexport default RuneScapeMap\n","import { h } from 'preact'\nimport Layout from '../components/layout'\nimport hero from '../_data/hero'\nimport Meta from '../components/meta'\nimport { connect } from 'react-redux'\nimport RuneScapeMap from '../components/runescape-map'\nimport './tag.css'\n\nconst TileShow = ({ data, tiles }) => {\n  return (\n    <Layout>\n      <Meta title={`Tile markers - ${hero.title}`} description={data} />\n      <section id=\"tiles\">\n        <div class=\"content-section tag-container\">\n          <RuneScapeMap tiles={tiles} />\n          <pre class=\"pre-select\">{data}</pre>\n        </div>\n      </section>\n    </Layout>\n  )\n}\n\nconst mapStateToProps = (state, { b64 }) => {\n  let decodedData = ''\n  let jsonData = []\n\n  try {\n    const b64string = b64 || window.location.hash.substring(1)\n    decodedData = atob(b64string)\n    jsonData = JSON.parse(decodedData)\n  } catch (ignored) {}\n\n  return {\n    data: decodedData,\n    tiles: jsonData\n  }\n}\n\nexport default connect(mapStateToProps)(TileShow)\n"],"sourceRoot":""}